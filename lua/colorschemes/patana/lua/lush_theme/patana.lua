---@diagnostic disable: undefined-global, unused-local
-- autogenerated lush spec on Mon 30 Dec 2024 11:17:43 PM MSK
-- Run :Lushify
-- then /Normal to find the Normal group and edit your fg & bg colors
local lush = require("lush")
local hsl = lush.hsl
local hsluv = lush.hsluv

local colors = {
  grays = {
    ["000"] = hsl("#000000"),
    ["050"] = hsl("#0E0E0E"),
    ["100"] = hsl("#1C1C1C"),
    ["150"] = hsl("#2A2A29"),
    ["200"] = hsl("#393837"),
    ["250"] = hsl("#474645"),
    ["300"] = hsl("#555453"),
    ["350"] = hsl("#636261"),
    ["400"] = hsl("#71706F"),
    ["450"] = hsl("#807F7D"),
    ["500"] = hsl("#8E8D8A"),
    ["550"] = hsl("#9C9B98"),
    ["600"] = hsl("#AAA9A6"),
    ["650"] = hsl("#B8B7B4"),
    ["700"] = hsl("#C6C5C2"),
    ["750"] = hsl(36, 6, 83),
    ["800"] = hsl(40, 10, 88),
    ["850"] = hsl(40, 18, 100),
    ["900"] = hsl(40, 100, 99),
  },
  green_pastel = hsl("#B3D8AB"),
  green_light = hsl("#7BB662"),
  green_dark = hsl("#589C48"),
  orange_pastel = hsl("#F9BA8A"),
  orange_light = hsl("#fbb149"),
  orange_dark = hsl("#F58024"),
  purple_pastel = hsl("#D2A7DC"),
  purple_light = hsl("#994fb2"),
  purple_dark = hsl("#733381"),
}

local palette = {
  bg = colors.grays["850"],
  bg_subtle = colors.grays["800"],
  bg_very_subtle = colors.grays["700"],
  norm = colors.grays["050"],
  norm_subtle = colors.grays["100"],
  norm_very_subtle = colors.grays["200"],

  cursor_line = colors.grays["800"],
  comment = colors.grays["450"],
  oob = colors.grays["900"],

  visual = colors.orange_light,
  literal = colors.green_dark,

  add = colors.green_pastel,
  change = colors.orange_pastel,
  delete = colors.purple_pastel,

  error = colors.purple_dark,
  warn = colors.orange_dark,
  hint = colors.green_dark,
  info = colors.grays["050"],
  ok = colors.norm_subtle,
}

return lush(function(injected_functions)
  local sym = injected_functions.sym
  -- stylua: ignore
  return {
  Normal { fg = palette.norm, bg = palette.bg },
	NormalFloat { fg = palette.norm, bg = palette.bg_subtle },
	NormalBorder { link = "NormalFloat" },

	Comment { fg = palette.comment, italic = true },
	SpecialComment { link = "Comment" },
	Critical { fg = palette.bg, bg = palette.accent, bold = true },
	-- constant literals
	Constant { fg = palette.literal },
	Character { link = "Constant" },
	Number { link = "Constant" },
	Boolean { link = "Constant" },
	Float { link = "Constant" },
	String { link = "Constant" },
	Directory { link = "Constant" },
	Title { link = "Constant" },
	-- syntax
	Function { fg = palette.norm, bold = true },
	Identifier { link = "Function" },

	Statement { bold = true },
	Conditonal { link = "Statement" },
	Repeat { link = "Statement" },
	Label { link = "Statement" },
	Keyword { link = "Statement" },
	Exception { link = "Statement" },

	PreProc { bold = true },
	Include { link = "PreProc" },
	Define { link = "PreProc" },
	Macro { link = "PreProc" },
	PreCondit { link = "PreProc" },

	Type { underline = true },
	StorageClass { link = "Type" },
	Structure { link = "Type" },
	Typedef { link = "Type" },

	Operator { fg = palette.accent },
	Debug { link = "Operator" },

	Special { italic = true },
	SpecialChar { link = "Special" },
	Tag { link = "Special" },
	Delimiter { link = "Special" },

	Underlined { underline = true },
	Ignore { fg = palette.norm_very_subtle },
	Error { reverse = true, bold = true },
	Todo { fg = palette.accent, italic = true },
	-- spell
	SpellBad { undercurl = true, sp = palette.norm },
	SpellCap { link = "SpellBad" },
	SpellLocal { link = "SpellBad" },
	SpellRare { link = "SpellBad" },
	-- ui
	ColorColumn { link = "CursorLine" },
	Conceal { link = "Comment" },
	CurSearch { link = "Visual" },
	Cursor { fg = palette.bg, bg = palette.accent },
	CursorColumn { link = "CursorLine" },
	CursorLine { bg = palette.cursor_line },
	CursorLineNr { fg = palette.norm, bg = palette.cursor_line, bold = true },
	EndOfBuffer { link = "Normal" },
	ErrorMsg { fg = palette.accent, bold = true },
	FloatBorder { fg = palette.norm_subtle, bg = palette.bg_subtle },
	FloatTitle {
		fg = palette.norm_subtle,
		bg = palette.bg_subtle,
		bold = true,
		underline = true,
	},
	FoldColumn { link = "SignColumn" },
	Folded { fg = palette.norm, bg = palette.bg_subtle, bold = true },
	IncSearch { link = "CurSearch" },
	LineNr { fg = palette.bg_very_subtle },
	MatchParen { reverse = true },
	ModeMsg { fg = palette.norm, bold = true },
	MoreMsg { fg = palette.norm, bold = true },
	MsgArea { fg = palette.norm, bg = palette.bg_very_subtle },
	NonText { fg = palette.norm_very_subtle },
	NormalNC { link = "Normal" },
	NvimInternalError { link = "ErrorMsg" },
	Pmenu { bg = palette.bg_subtle },
	PmenoSbar { bg = palette.bg_subtle, reverse = true },
	PmenuKind { fg = palette.literal, bg = palette.bg_subtle },
	PmenuSel { fg = palette.norm, bg = palette.bg_subtle, reverse = true, bold = true },
	PmenuKindSel { fg = palette.literal, bg = palette.bg_subtle, reverse = true, bold = true },
	Question { bold = true },
	QuickFixLine { link = "Visual" },
	Search { link = "Visual" },
	SignColumn { bg = palette.bg, fg = palette.norm, bold = true },
	SpecialKey { fg = palette.norm_subtle },
	StatusLine { fg = palette.norm, bg = palette.cursor_line },
	StatusLineNC { fg = palette.norm, bg = palette.oob, italic = true },
	StatusLineTerm { link = "StatusLine" },
	StatusLineTermNC { link = "StatusLineNC" },
	Substitute { link = "IncSearch" },
	TabLine { fg = palette.norm_very_subtle, bg = palette.bg_very_subtle },
	TabLineFill { bg = palette.oob },
	TabLineSel { fg = palette.norm, bg = palette.bg, bold = true },
	Visual { bg = palette.visual, fg = palette.fg },
	WarningMsg { fg = palette.critical, bold = true },
	WildMenu { link = "IncSearch" },
	WinBar { link = "StatusLine" },
	WinBarNC { link = "StatusLineNc" },
	WinSeparator { fg = palette.norm, bg = palette.bg },
	-- diagnostics
	DiagnosticDeprecated { strikethrough = true },

	DiagnosticError { fg = palette.error, bold = true },
	DiagnosticWarn { fg = palette.warn, bold = true },
	DiagnosticHint { fg = palette.hint, bold = true },
	DiagnosticInfo { fg = palette.info, bold = true },
	DiagnosticOk { fg = palette.ok, bold = true },

	DiagnosticUnderlineError { sp = palette.error, undercurl = true, bold = true },
	DiagnosticUnderlineWarn { sp = palette.warn, undercurl = true, bold = true },
	DiagnosticUnderlineHint { sp = palette.hint, undercurl = true, bold = true },
	DiagnosticUnderlineInfo { sp = palette.info, undercurl = true, bold = true },
	DiagnosticUnderlineOk { sp = palette.norm, undercurl = true, bold = true },

	DiagnosticVirtualTextError { link = "DiagnosticError" },
	DiagnosticVirtualTextHint { link = "DiagnosticHint" },
	DiagnosticVirtualTextInfo { link = "DiagnosticInfo" },
	DiagnosticVirtualTextWarn { link = "DiagnosticWarn" },

	DiagnosticDefaultError { link = "DiagnosticError" },
	DiagnosticDefaultHint { link = "DiagnosticHint" },
	DiagnosticDefaultInfo { link = "DiagnosticInfo" },
	DiagnosticDefaultWarn { link = "DiagnosticWarn" },

	DiagnosticFloatingError { link = "DiagnosticError" },
	DiagnosticFloatingHint { link = "DiagnosticHint" },
	DiagnosticFloatingInfo { link = "DiagnosticInfo" },
	DiagnosticFloatingWarn { link = "DiagnosticWarn" },

	DiagnosticSignError { link = "DiagnosticError" },
	DiagnosticSignHint { link = "DiagnosticHint" },
	DiagnosticSignInfo { link = "DiagnosticInfo" },
	DiagnosticSignWarn { link = "DiagnosticWarn" },
	-- git-related
	Added { fg = palette.fg, bg = palette.add },
	Changed { fg = palette.fg, bg = palette.change },
	Removed { fg = palette.fg, bg = palette.delete },
	Deleted { fg = palette.fg, bg = palette.delete },

	DiffAdd { link = "Added" },
	DiffChange { link = "Changed" },
	DiffDelete { link = "Removed" },
	DiffRemoved { link = "Removed" },

	DiffAddGutter { link = "Added" },
	DiffChangeGutter { link = "Changed" },
	DiffDeleteGutter { link = "Removed" },

	GitAdd { link = "Added" },
	GitChange { link = "Changed" },
	GitDelete { link = "Removed" },
	-- treesitter
	sym "@string.documentation" { link = "Comment" },
	sym "@keyword.function.julia" { bold = true },
	-- quickscope.vim 
	QuickScopeCursor { link = "Cursor" },
	QuickScopePrimary { link = "Search" },
	QuickScopeSecondary { link = "IncSearch" },
	-- mini.nvim 
	MiniStarterFooter { link = "Normal" },
	MiniStarterHeader { link = "Normal" },
	MiniStarterSection { link = "Normal" },
	-- gitsigns.nvim
	GitSignsAdd { link = "Added" },
	GitSignsChange { link = "Changed" },
	GitSignsDelete { link = "Removed" },
	GitSignsAddNr { link = "Added" },
	GitSignsChangeNr { link = "Changed" },
	GitSignsDeleteNr { link = "Removed" },
	GitSignsAddLn { link = "Added" },
	GitSignsChangeLn { link = "Changed" },
	GitSignsDeleteLn { link = "Removed" },
	-- telescope.nvim
	TelescopeSelection { link = "CursorLine" },
	-- whichkey.nvim
	WhichKey { link = "NormalFloat" },
	WhichKeyDesc { link = "WhichKey" },
	WhichKeyFloat { link = "WhichKey" },
	WhichKeyGroup { link = "Operator" },
	WhichKeyValue { link = "Operator" },
	WhichKeyBorder { link = "WhichKey" },
	WhichKeySeparator { link = "Constant" },
	-- oil.nvim
	OilDir { link = "Special" },
	OilCopy { link = "Function" },
	OilMove { link = "Function" },
	OilPurge { link = "Function" },
	OilTrash { link = "String" },
	OilChange { link = "Change" },
	OilCreate { link = "Add" },
	OilDelete { link = "Removed" },
	OilSocket { link = "Constant" },
	OilDirIcon { link = "OilDir" },
	OilRestore { link = "Function" },
	OilLinkTarget { link = "Underline" },
	OilTrashSourcePath { link = "Normal" },
	-- sidebar
	NormalSB { fg = palette.norm, bg = palette.oob },
	SignColumnSB { fg = palette.norm, bg = palette.oob },
	WinSeparatorSB { fg = palette.norm, bg = palette.oob },
  }
end)
