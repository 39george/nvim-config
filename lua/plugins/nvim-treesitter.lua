-- Nvim Treesitter configurations and abstraction layer

return {
  "nvim-treesitter/nvim-treesitter",
  event = { "BufReadPost", "BufNewFile", "BufWritePre" },
  build = ":TSUpdate",
  cmd = { "TSUpdateSync", "TSUpdate", "TSInstall" },
  opts_extend = { "ensure_installed" },
  opts = {
    parser_install_dir = vim.fn.stdpath("data") .. "/nvim-treesitter/parsers",
    highlight = { enable = true },
    indent = { enable = true },
    ensure_installed = {
      "rust",
      "yaml",
      "json",
      "jsonc",
      "http",
      "wgsl",
      "glsl",
      "wgsl_bevy",
      "vim",
      "vimdoc",
      "typescript",
      "tsx",
      "toml",
      "sql",
      "scss",
      "css",
      "ron",
      "passwd",
      "nginx",
      "markdown",
      "markdown_inline",
      "make",
      "lua",
      "luadoc",
      "javascript",
      "jq",
      "html",
      "graphql",
      "go",
      "gomod",
      "gosum",
      "gowork",
      "gotmpl",
      "gitignore",
      "gitcommit",
      "gitattributes",
      "git_rebase",
      "git_config",
      "dockerfile",
      "diff",
      "csv",
      "c",
      "cpp",
      "c_sharp",
      "comment",
      "cmake",
      "bash",
      "awk",
      "python",
      "proto",
      "solidity",
      "mermaid",
      "blueprint",
      -- "rust_with_rstml",
    },
    auto_install = false,
    sync_install = false,
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "<C-space>",
        node_incremental = "<C-space>",
        scope_incremental = false,
        node_decremental = "<bs>",
      },
    },
  },
  ---@param opts TSConfig
  config = function(_, opts)
    vim.opt.runtimepath:append(
      vim.fn.stdpath("data") .. "/nvim-treesitter/parsers"
    )
    require("nvim-treesitter.configs").setup(opts)
  end,
}
